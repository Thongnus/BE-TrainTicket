package com.example.betickettrain.service.ServiceImpl;

import com.example.betickettrain.dto.BookingDto;
import com.example.betickettrain.dto.TicketDto;
import com.example.betickettrain.entity.*;
import com.example.betickettrain.mapper.BookingMapper;
import com.example.betickettrain.mapper.UserMapper;
import com.example.betickettrain.repository.FailedEmailLogRepository;
import com.example.betickettrain.repository.NotificationRepository;
import com.example.betickettrain.service.EmailService;
import com.example.betickettrain.util.TemplateMail;
import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.mail.MailException;
import org.springframework.mail.MailSendException;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.retry.annotation.Backoff;
import org.springframework.retry.annotation.EnableRetry;
import org.springframework.retry.annotation.Recover;
import org.springframework.retry.annotation.Retryable;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Service
@Slf4j
@EnableRetry
public class EmailServiceImpl implements EmailService {
    @Autowired
    private UserMapper userMapper;

    @Autowired
    private JavaMailSender mailSender;
    @Autowired
    private NotificationRepository notificationRepository;

    @Autowired
    private FailedEmailLogRepository failedEmailLogRepository;
    @Autowired
    private BookingMapper bookingMapper;

    @Override
    public void sendEmail(String to, String subject, String body) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, false, "UTF-8");

            helper.setTo(to);
            helper.setSubject(subject);
            helper.setText(body, false); // false = plain text. D√πng true n·∫øu b·∫°n d√πng HTML

            mailSender.send(message);
            log.info("‚úÖ Email sent to {}", to);
        } catch (MessagingException e) {
            log.error("‚ùå Failed to send email to {}", to, e);
            throw new RuntimeException("Failed to send email", e);
        }
    }


    @Override
    public void createSuccessNotification(BookingDto booking) {
        try {
            Notification notification = new Notification();
            notification.setUser(userMapper.toEntity(booking.getUser()));
            notification.setTitle("X√°c nh·∫≠n ƒë·∫∑t v√© th√†nh c√¥ng");
            notification.setMessage("Email x√°c nh·∫≠n ƒë·∫∑t v√© " + booking.getBookingCode() + " ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ƒë·ªãa ch·ªâ email c·ªßa b·∫°n.");
            notification.setNotificationType(Notification.NotificationType.booking);
            notification.setRelatedId(booking.getBookingId());
            notification.setIsRead(false);

            notificationRepository.save(notification);
        } catch (Exception e) {
            log.warn("Failed to create success notification for booking: {}", booking.getBookingCode(), e);
        }
    }

    /**
     * T·∫°o notification backup khi email fail
     */
    // T·∫°o notification backup khi email fail
    @Override
    public void createEmailFailureNotification(BookingDto booking) {
        try {
            Notification notification = new Notification();
            notification.setUser(userMapper.toEntity(booking.getUser()));
            notification.setTitle("ƒê·∫∑t v√© th√†nh c√¥ng - " + booking.getBookingCode());
            notification.setMessage(String.format(
                    "Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë·∫∑t v√© th√†nh c√¥ng.\n" +
                            "M√£ ƒë·∫∑t v√©: %s\n" +
                            "Th·ªùi gian thanh to√°n: %s\n" +
                            "Email x√°c nh·∫≠n s·∫Ω ƒë∆∞·ª£c g·ª≠i trong th·ªùi gian s·ªõm nh·∫•t.",
                    booking.getBookingCode(),
                    booking.getPaymentDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"))
            ));
            notification.setNotificationType(Notification.NotificationType.booking);
            notification.setRelatedId(booking.getBookingId());
            notification.setIsRead(false);

            notificationRepository.save(notification);
            log.info("Created backup notification for booking: {}", booking.getBookingCode());

        } catch (Exception e) {
            log.error("Failed to create backup notification for booking: {}", booking.getBookingCode(), e);
        }
    }

    @Override
    public void createPermanentFailureNotification(BookingDto booking) {
        try {
            Notification notification = new Notification();
            notification.setUser(userMapper.toEntity(booking.getUser()));
            notification.setTitle("Th√¥ng tin ƒë·∫∑t v√© - " + booking.getBookingCode());
            notification.setMessage(String.format(
                    "ƒê·∫∑t v√© c·ªßa b·∫°n ƒë√£ th√†nh c√¥ng!\n" +
                            "M√£ ƒë·∫∑t v√©: %s\n" +
                            "Th·ªùi gian thanh to√°n: %s\n" +
                            "Vui l√≤ng li√™n h·ªá b·ªô ph·∫≠n CSKH ƒë·ªÉ nh·∫≠n th√¥ng tin chi ti·∫øt v·ªÅ v√©.",
                    booking.getBookingCode(),
                    booking.getPaymentDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"))
            ));
            notification.setNotificationType(Notification.NotificationType.booking);
            notification.setRelatedId(booking.getBookingId());
            notification.setIsRead(false);

            notificationRepository.save(notification);

            // Optional: Notify admin
            notifyAdminEmailFailure(booking);

        } catch (Exception e) {
            log.error("Failed to create permanent failure notification", e);
        }
    }

    @Override
    public void notifyAdminEmailFailure(BookingDto booking) {
        try {
            log.error("ADMIN ALERT: Email confirmation failed permanently for booking: {}",
                    booking.getBookingCode());
            // C√≥ th·ªÉ g·ª≠i Slack, email admin, ho·∫∑c t·∫°o admin notification
        } catch (Exception e) {
            log.error("Failed to notify admin about email failure", e);
        }
    }


    @Override
    public void sendEmailWithQRCode(String to, String subject, String text, byte[] qrCodeBytes) throws MessagingException {


        MimeMessage message = mailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(message, true);

        helper.setTo(to);
        helper.setSubject(subject);

        // N·ªôi dung email d·∫°ng HTML c√≥ nh√∫ng ·∫£nh
        helper.setText(text, true);

        // ƒê√≠nh k√®m ·∫£nh QR code inline v·ªõi Content-ID = qrCodeImage
        helper.addInline("qrCodeImage", new ByteArrayResource(qrCodeBytes), "image/png");

        mailSender.send(message);
    }

    @Async("emailExecutor")
    @Retryable(
            value = {MailException.class, MessagingException.class},
            maxAttempts = 3,
            backoff = @Backoff(delay = 2000, multiplier = 2)
    )
    @Override
    public void sendTripStatusEmail(String to, String tripCode, LocalDateTime departureTime, Trip.Status status, Integer delayMinutes, String reason) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

            helper.setTo(to);

            if (Trip.Status.delayed.equals(status)) {
                helper.setSubject("‚è∞ Th√¥ng b√°o tr·ªÖ chuy·∫øn t√†u " + tripCode);
                helper.setText(TemplateMail.buildTripDelayHtml(tripCode, departureTime, delayMinutes, reason), true);
            } else if (Trip.Status.cancelled.equals(status)) {
                helper.setSubject("üö´ Th√¥ng b√°o hu·ª∑ chuy·∫øn t√†u " + tripCode);
                helper.setText(TemplateMail.buildTripCancelHtml(tripCode, departureTime, reason), true);
            } else {
                log.warn("‚ö†Ô∏è Kh√¥ng g·ª≠i email v√¨ tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá: {}", status);
                return;
            }

            mailSender.send(message);
            log.info("‚úÖ ƒê√£ g·ª≠i email {} t·ªõi {}", status.equals(Trip.Status.delayed) ? "tr·ªÖ chuy·∫øn" : "hu·ª∑ chuy·∫øn", to);

        } catch (MessagingException e) {
            log.error("‚ùå L·ªói g·ª≠i email {} t·ªõi {}", status, to, e);
            throw new MailSendException("Kh√¥ng g·ª≠i ƒë∆∞·ª£c email tr·∫°ng th√°i chuy·∫øn t√†u", e);
        }
    }

    @Recover
    public void recover(MailException e, String to, String tripCode, LocalDateTime departureTime, Trip.Status status, Integer delayMinutes, String reason) {
        if( status.equals(Trip.Status.cancelled) ) delayMinutes =null;
      //  log.error("‚ùå Email g·ª≠i th·∫•t b·∫°i vƒ©nh vi·ªÖn t·ªõi {} cho chuy·∫øn {} tr·∫°ng th√°i {}: {}", to, tripCode, status, e.getMessage());
        // TODO: Ghi log DB, t·∫°o job retry sau ho·∫∑c b√°o admin
        FailedEmailLog log = FailedEmailLog.builder()
                .recipientEmail(to)
                .tripCode(tripCode)
                .departureTime(departureTime)
                .status(status)
                .delayMinutes(delayMinutes)
                .reason(reason)
                .errorMessage(e.getMessage())
                .retryCount(0)
                .resolved(false)
                .createdAt(LocalDateTime.now())
                .build();

        failedEmailLogRepository.save(log);
    }

    @Async("emailExecutor")
    @Retryable(
            value = {MailException.class, MessagingException.class},
            maxAttempts = 3,
            backoff = @Backoff(delay = 2000, multiplier = 2)
    )
    @Override
    public void sendBookingCancelEmail(String to, Booking booking, String tripCode , String reason) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

            helper.setTo(to);
            helper.setSubject("‚ùå X√°c nh·∫≠n hu·ª∑ v√©: " + booking.getBookingCode());

            // N·ªôi dung HTML (d√πng template ri√™ng n·∫øu c√≥)
            String content = TemplateMail.buildBookingCancelHtml(
                    booking.getBookingCode(),
                    tripCode,
                    booking.getBookingDate(),
                    reason
            );

            helper.setText(content, true);
            mailSender.send(message);
            log.info("‚úÖ ƒê√£ g·ª≠i email hu·ª∑ v√© t·ªõi {}", to);

        } catch (MessagingException e) {
            log.error("‚ùå G·ª≠i email hu·ª∑ v√© th·∫•t b·∫°i t·ªõi {}: {}", to, e.getMessage());
            throw new MailSendException("G·ª≠i email hu·ª∑ v√© th·∫•t b·∫°i", e);
        }
    }

    @Override
    public void sendRefundRequestedEmail(Booking booking, List<Ticket> tickets, double refundAmount, RefundPolicy policy) {

            try {
                MimeMessage message = mailSender.createMimeMessage();
                MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

                helper.setTo(booking.getContactEmail());
                helper.setSubject("üîÅ Y√™u c·∫ßu ho√†n v√© - " + booking.getBookingCode());

                String htmlContent = TemplateMail.buildRefundRequestHtml(booking, tickets, refundAmount, policy);
                helper.setText(htmlContent, true);

                mailSender.send(message);
                log.info("‚úÖ ƒê√£ g·ª≠i email x√°c nh·∫≠n y√™u c·∫ßu ho√†n v√© cho booking {}", booking.getBookingCode());

            } catch (MessagingException e) {
                log.error("‚ùå G·ª≠i email ho√†n v√© th·∫•t b·∫°i: {}", e.getMessage());
                throw new MailSendException("G·ª≠i email ho√†n v√© th·∫•t b·∫°i", e);
            }
    }
    @Override
    public void sendRefundApprovedEmail(Booking booking, List<TicketDto> tickets, double refundAmount) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

            helper.setTo(booking.getContactEmail());
            helper.setSubject("‚úÖ Y√™u c·∫ßu ho√†n v√© ƒë√£ ƒë∆∞·ª£c duy·ªát - " + booking.getBookingCode());
            BookingDto bookingDto = bookingMapper.toDto(booking);

            String htmlContent = TemplateMail.buildRefundApprovedHtml(booking, tickets, refundAmount);
            helper.setText(htmlContent, true);

            mailSender.send(message);
            log.info("‚úÖ ƒê√£ g·ª≠i email duy·ªát ho√†n v√© cho booking {}", booking.getBookingCode());

        } catch (MessagingException e) {
            log.error("‚ùå G·ª≠i email duy·ªát ho√†n v√© th·∫•t b·∫°i: {}", e.getMessage());
            throw new MailSendException("G·ª≠i email duy·ªát ho√†n v√© th·∫•t b·∫°i", e);
        }
    }


    @Override
    public void sendRefundRejectedEmail(Booking booking, List<TicketDto> tickets, String reason) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

            helper.setTo(booking.getContactEmail());
            helper.setSubject("‚ùå Y√™u c·∫ßu ho√†n v√© b·ªã t·ª´ ch·ªëi - " + booking.getBookingCode());

            String htmlContent = TemplateMail.buildRefundRejectedHtml(booking, tickets, reason);
            helper.setText(htmlContent, true);

            mailSender.send(message);
            log.info("‚úÖ ƒê√£ g·ª≠i email t·ª´ ch·ªëi ho√†n v√© cho booking {}", booking.getBookingCode());

        } catch (MessagingException e) {
            log.error("‚ùå G·ª≠i email t·ª´ ch·ªëi ho√†n v√© th·∫•t b·∫°i: {}", e.getMessage());
            throw new MailSendException("G·ª≠i email t·ª´ ch·ªëi ho√†n v√© th·∫•t b·∫°i", e);
        }
}}
